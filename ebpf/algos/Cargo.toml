[package]
name = "algos"
version = "0.1.0"
edition = "2021"

license.workspace = true

[dependencies]
algos-common = { path = "../algos-common", features = ["user"] }
anyhow.workspace = true
anyhow.default-features = true
aya = { workspace = true }
aya-log = { workspace = true }
env_logger = { workspace = true }
libc = { workspace = true }
log.workspace = true
tokio = { workspace = true, features = [
    "macros",
    "rt",
    "rt-multi-thread",
    "net",
    "signal",
] }
bytemuck     = { version = "1.22", features = ["derive"] }
serde = { version = "1.0.219", features = ["derive"] }
bitflags = "2.9.0"
thiserror = "2.0.12"
cgroups-rs = "0.3.4"
[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
algos-ebpf = { path = "../algos-ebpf" }

[lib]
name = "algos"
path = "src/lib.rs"
#
[features]
ebpf_loggin_enabled = []
